using System;
using System.Collections.Generic;
using System.Net;

namespace Agents.net.Models
{
    /// <summary>
    /// Represents a response from an AI language model.
    /// Contains the generated content, usage statistics, and any tool call results.
    /// </summary>
    public class ModelResponse
    {
        /// <summary>
        /// Gets or sets the text content generated by the AI model.
        /// </summary>
        public string Content { get; set; }

        /// <summary>
        /// Gets or sets information about token usage and estimated cost.
        /// </summary>
        /// <remarks>
        /// May be null if the model provider doesn't supply usage information.
        /// </remarks>
        public UsageInfo Usage { get; set; }

        /// <summary>
        /// Gets or sets error information if the model request failed.
        /// </summary>
        /// <remarks>
        /// Null when the request was successful.
        /// </remarks>
        public ModelError Error { get; internal set; }

        /// <summary>
        /// Gets or sets the list of tool call results executed during response generation.
        /// </summary>
        /// <remarks>
        /// This list contains information about any tools the model used, including
        /// the tool name, arguments passed, and the result of the tool execution.
        /// </remarks>
        public List<ToolResult> Tools { get; set; } = new List<ToolResult>();

        /// <summary>
        /// Gets or sets the structured data object when using structured output mode.
        /// This contains the parsed and typed response when EnableStructuredOutput is used.
        /// </summary>
        /// <remarks>
        /// This will be null for regular text responses. When structured output is enabled
        /// and successful, this will contain the deserialized object of the specified type.
        /// The raw JSON can still be accessed through the Content property.
        /// </remarks>
        public object StructuredData { get; set; }

        /// <summary>
        /// Indicates whether this response was generated using structured output mode.
        /// </summary>
        public bool IsStructuredResponse { get; set; } = false;

        /// <summary>
        /// Gets the structured data cast to the specified type T.
        /// </summary>
        /// <typeparam name="T">The type to cast the structured data to</typeparam>
        /// <returns>The structured data as type T, or default(T) if not available or cast fails</returns>
        /// <remarks>
        /// This is a convenience method for accessing structured data with type safety.
        /// Use this when you know the expected type of the structured response.
        /// </remarks>
        public T GetStructuredData<T>()
        {
            if (StructuredData is T)
            {
                return (T)StructuredData;
            }
            return default(T);
        }

        /// <summary>
        /// Attempts to get the structured data as the specified type.
        /// </summary>
        /// <typeparam name="T">The type to cast the structured data to</typeparam>
        /// <param name="data">The structured data if successful</param>
        /// <returns>True if the cast was successful, false otherwise</returns>
        public bool TryGetStructuredData<T>(out T data)
        {
            if (StructuredData is T)
            {
                data = (T)StructuredData;
                return true;
            }
            data = default(T);
            return false;
        }
    }

    /// <summary>
    /// Contains error information when a model request fails.
    /// </summary>
    public class ModelError
    {
        /// <summary>
        /// Gets or sets the error code provided by the model.
        /// </summary>
        public object Code { get; set; }

        /// <summary>
        /// Gets or sets the human-readable error message.
        /// </summary>
        public object Message { get; set; }

        /// <summary>
        /// Gets or sets the type or category of the error.
        /// </summary>
        public object Type { get; set; }
    }

    /// <summary>
    /// Contains information about token usage and estimated cost for a model request.
    /// </summary>
    public class UsageInfo
    {
        /// <summary>
        /// Gets or sets the number of tokens used in the prompt/input.
        /// </summary>
        public int PromptTokens { get; set; }

        /// <summary>
        /// Gets or sets the number of tokens generated in the completion/response.
        /// </summary>
        public int CompletionTokens { get; set; }

        /// <summary>
        /// Gets or sets the estimated cost of the request in USD.
        /// </summary>
        /// <remarks>
        /// This is calculated based on the token usage and the model's pricing structure.
        /// </remarks>
        public decimal EstimatedCost { get; set; }

        /// <summary>
        /// Gets the total number of tokens used in the request and response.
        /// </summary>
        public int TotalTokens => PromptTokens + CompletionTokens;
    }

    /// <summary>
    /// Represents the result of a tool call made during model response generation.
    /// </summary>
    public class ToolResult
    {
        /// <summary>
        /// Gets or sets the name of the called tool.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the arguments provided to the tool by the model.
        /// </summary>
        public object Arguments { get; set; }

        /// <summary>
        /// Gets or sets the result returned by the tool execution.
        /// </summary>
        /// <remarks>
        /// This is the value returned by the tool function, serialized to string format.
        /// </remarks>
        public string Result { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier of the tool call that generated this result.
        /// </summary>
        /// <remarks>
        /// This ID is provided by the model in its tool call request and must be
        /// included with the result to correctly associate results with requests.
        /// </remarks>
        public string ToolCallId { get; set; }
    }
}