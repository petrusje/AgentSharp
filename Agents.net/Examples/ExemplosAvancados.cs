// NOTA: Todas as classes deste arquivo foram movidas para seus pr√≥prios arquivos nas pastas correspondentes.
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using Agents.net.Core;
using Agents.net.Models;
using Agents.net.Tools;
using Agents.net.Attributes;

namespace Agents.net.Examples
{
    /// <summary>
    /// Exemplos Avan√ßados - Demonstra funcionalidades √∫nicas do Agents.net
    /// Casos de uso complexos com ToolPacks personalizados, Function Calling avan√ßado,
    /// Fluent Interface sofisticado e workflows entre agentes
    /// </summary>
    public static class ExemplosAvancados
    {
        /// <summary>
        /// Agente de Research & Development com ToolPacks personalizados integrados
        /// Demonstra function calling avan√ßado, contexto din√¢mico e m√∫ltiplos ToolPacks
        /// </summary>
        public static async Task ExecutarAgentePesquisaAvancado(IModel modelo)
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("üß™ EXEMPLO 7: AGENTE R&D AVAN√áADO - ADVANCED TOOLPACKS & FUNCTION CALLING");
            Console.WriteLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            Console.ResetColor();

            Console.WriteLine("üî¨ Demonstra ToolPacks integrados, function calling na classe e contexto din√¢mico");
            Console.WriteLine("üöÄ Agente com capacidades de pesquisa, an√°lise e s√≠ntese autom√°tica\n");

            var contextoComplexo = new ContextoPesquisaComplexo
            {
                AreaPesquisa = "Large Language Models",
                NivelProfundidade = "PhD",
                TipoEntrega = "Paper Acad√™mico",
                TempoDisponivel = TimeSpan.FromHours(2),
                RecursosDisponiveis = new[] { "ArXiv", "Google Scholar", "IEEE", "ACM" },
                RestricoesBusca = new[] { "Portugu√™s brasileiro", "2023-2024" },
                MetricasQualidade = new QualityMetrics
                {
                    CitacoesMinimas = 50,
                    FatorImpactoMinimo = 2.5,
                    RelevanciaContextual = 0.9
                }
            };

            // Agente com m√∫ltiplos ToolPacks e auto-configura√ß√£o baseada no contexto
            var agentePesquisador = new AgentePesquisaAvancado(modelo)
                .WithContext(contextoComplexo)
                .WithPersona(ctx => $@"
üß† Voc√™ √© um pesquisador PhD s√™nior especializado em {ctx.AreaPesquisa}! 

PERFIL DIN√ÇMICO (baseado no contexto):
üìä N√≠vel: {ctx.NivelProfundidade}
üéØ Entrega: {ctx.TipoEntrega}
‚è∞ Tempo dispon√≠vel: {ctx.TempoDisponivel.TotalHours}h
üîç Recursos: {string.Join(", ", ctx.RecursosDisponiveis)}

METODOLOGIA PERSONALIZADA:
1. AN√ÅLISE CONTEXTUAL - Adapte sua abordagem ao n√≠vel {ctx.NivelProfundidade}
2. BUSCA ESTRAT√âGICA - Use recursos dispon√≠veis: {string.Join(", ", ctx.RecursosDisponiveis)}
3. S√çNTESE INTELIGENTE - Foque em {ctx.TipoEntrega}
4. VALIDA√á√ÉO RIGOROSA - Aplique m√©tricas de qualidade definidas

RESTRI√á√ïES ATIVAS:
{string.Join("\n", ctx.RestricoesBusca.Select(r => $"‚Ä¢ {r}"))}

Seja meticuloso, cient√≠fico e adapte seu estilo ao contexto fornecido!")
                .WithInstructions(ctx => $@"
Conduza pesquisa {ctx.NivelProfundidade} em {ctx.AreaPesquisa} para produzir {ctx.TipoEntrega}.
Tempo dispon√≠vel: {ctx.TempoDisponivel.TotalHours}h.
Use todas as ferramentas dispon√≠veis de forma inteligente.")
                .WithGuardRails("Sempre cite fontes acad√™micas. Nunca invente dados ou estat√≠sticas.")
                .WithTools(new ReasoningToolPack())
                .WithTools(new SearchToolPack());

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("üî• Pesquisa: 'Estado da arte em LLMs para portugu√™s brasileiro - an√°lise abrangente'");
            Console.ResetColor();
            Console.WriteLine("\nüß™ Pesquisa R&D Avan√ßada:");
            Console.WriteLine(new string('-', 60));

            try
            {
                var resultado = await agentePesquisador.ExecuteAsync(
                    @"Conduza uma pesquisa abrangente sobre Large Language Models para portugu√™s brasileiro. 
                    Inclua: metodologias SOTA, principais modelos (BERTimbau, GPT-4, Claude), benchmarks, 
                    limita√ß√µes espec√≠ficas do portugu√™s, datasets dispon√≠veis e dire√ß√µes de pesquisa. 
                    Sintetize em formato de revis√£o sistem√°tica para submiss√£o acad√™mica."
                );

                Console.ForegroundColor = ConsoleColor.White;
                Console.WriteLine(resultado.Data);
                Console.ResetColor();

                Console.WriteLine(new string('-', 60));
                Console.WriteLine($"üìä Tokens utilizados: {resultado.Usage.TotalTokens}");
                Console.WriteLine($"üîß Function calls executados: {resultado.Tools.Count}");

                if (resultado.Tools.Count > 0)
                {
                    Console.WriteLine("\nüõ†Ô∏è Ferramentas utilizadas:");
                    foreach (var tool in resultado.Tools)
                    {
                        Console.WriteLine($"   üîπ {tool.Name} - {tool.Result}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"‚ùå Erro: {ex.Message}");
                Console.ResetColor();
            }
        }

        /// <summary>
        /// Consultor estrat√©gico com an√°lise multimodal e ToolPacks empresariais
        /// Demonstra fluent interface sofisticado e workflow entre agentes
        /// </summary>
        public static async Task ExecutarConsultorEstrategicoAvancado(IModel modelo)
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("üíº EXEMPLO 8: CONSULTOR ESTRAT√âGICO MULTIMODAL - ADVANCED BUSINESS WORKFLOW");
            Console.WriteLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            Console.ResetColor();

            Console.WriteLine("üè¢ Demonstra workflow empresarial complexo com m√∫ltiplos agentes especializados");
            Console.WriteLine("üìä An√°lise estrat√©gica, financeira e operacional integrada\n");

            var contextoEmpresarial = new ContextoEmpresarialComplexo
            {
                EmpresaInfo = new EmpresaInfo
                {
                    Nome = "TechMinas Innovation",
                    Setor = "Fintech",
                    Porte = "Scale-up",
                    Faturamento = 85_000_000,
                    Funcionarios = 350,
                    Localizacao = "Belo Horizonte, MG",
                    AnosOperacao = 7
                },
                CenarioAnalise = new CenarioAnalise
                {
                    TipoAnalise = "Expans√£o Internacional",
                    MercadosAlvo = new[] { "Argentina", "Col√¥mbia", "Chile", "M√©xico" },
                    HorizonteTemporal = 24, // meses
                    InvestimentoDisponivel = 25_000_000,
                    RiscoAceitavel = "M√©dio-Alto"
                },
                RequisitosDiligencia = new DiligenceRequirements
                {
                    AnaliseMercado = true,
                    AvaliacaoFinanceira = true,
                    EstudoViabilidade = true,
                    PlanejamentoOperacional = true,
                    GestaoRiscos = true,
                    ComplianceRegulatorio = true
                }
            };

            // Consultor principal com personalidade e instru√ß√µes baseadas no contexto complexo
            var consultorPrincipal = new ConsultorEstrategicoMultimodal(modelo)
                .WithContext(contextoEmpresarial)
                .WithPersona(ctx => $@"
üíº Voc√™ √© um consultor estrat√©gico s√™nior da McKinsey com 20+ anos de experi√™ncia!

PERFIL DO CLIENTE:
üè¢ Empresa: {ctx.EmpresaInfo.Nome} ({ctx.EmpresaInfo.Setor})
üìä Porte: {ctx.EmpresaInfo.Porte} - R$ {ctx.EmpresaInfo.Faturamento:N0}
üë• Time: {ctx.EmpresaInfo.Funcionarios} funcion√°rios
üåç Objetivo: {ctx.CenarioAnalise.TipoAnalise}
üí∞ Budget: R$ {ctx.CenarioAnalise.InvestimentoDisponivel:N0}

MERCADOS-ALVO: {string.Join(", ", ctx.CenarioAnalise.MercadosAlvo)}
HORIZONTE: {ctx.CenarioAnalise.HorizonteTemporal} meses
RISCO: {ctx.CenarioAnalise.RiscoAceitavel}

METODOLOGIA EXECUTIVA:
1. DIAGN√ìSTICO 360¬∞ - An√°lise situacional completa
2. MARKET INTELLIGENCE - Pesquisa de mercados-alvo
3. FINANCIAL MODELING - Proje√ß√µes e cen√°rios
4. RISK ASSESSMENT - Matriz de riscos detalhada
5. STRATEGIC ROADMAP - Plano de execu√ß√£o
6. GOVERNANCE FRAMEWORK - Estrutura de controle

Use frameworks: Porter 5 Forces, BCG Matrix, Ansoff, Blue Ocean!")
                .WithInstructions(ctx => $@"
Conduza an√°lise estrat√©gica completa para {ctx.CenarioAnalise.TipoAnalise}.
Mercados: {string.Join(", ", ctx.CenarioAnalise.MercadosAlvo)}.
Budget: R$ {ctx.CenarioAnalise.InvestimentoDisponivel:N0}.
Prazo: {ctx.CenarioAnalise.HorizonteTemporal} meses.
Use todas as ferramentas para an√°lise abrangente.")
                .WithGuardRails(@"
Sempre base recomenda√ß√µes em dados. Identifique claramente premissas e riscos.
Nunca prometa resultados garantidos. Mantenha √©tica profissional.")
                .WithTools(new ReasoningToolPack())
                .WithTools(new FinanceToolPack())
                .WithTools(new SearchToolPack());

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("üî• Cen√°rio: Expans√£o internacional da TechMinas para Am√©rica Latina");
            Console.ResetColor();
            Console.WriteLine("\nüíº An√°lise Estrat√©gica Multimodal:");
            Console.WriteLine(new string('-', 60));

            try
            {
                var resultado = await consultorPrincipal.ExecuteAsync(
                    @"A TechMinas Innovation (fintech brasileira, R$ 85M faturamento, 350 funcion√°rios) 
                    planeja expans√£o para Argentina, Col√¥mbia, Chile e M√©xico. Budget de R$ 25M, 
                    horizonte de 24 meses. Conduza an√°lise estrat√©gica completa incluindo:
                    1. Market sizing e oportunidades
                    2. An√°lise competitiva por pa√≠s
                    3. Modelo financeiro com proje√ß√µes
                    4. Matriz de riscos e mitiga√ß√£o
                    5. Roadmap de implementa√ß√£o
                    6. Estrutura organizacional requerida"
                );

                Console.ForegroundColor = ConsoleColor.White;
                Console.WriteLine(resultado.Data);
                Console.ResetColor();

                Console.WriteLine(new string('-', 60));
                Console.WriteLine($"üìä Tokens utilizados: {resultado.Usage.TotalTokens}");
                Console.WriteLine($"üîß Function calls executados: {resultado.Tools.Count}");

                // Demonstrar workflow entre agentes especializados
                Console.WriteLine("\nüîÑ Iniciando workflow com agentes especializados...\n");
                await ExecutarWorkflowAgentesEspecializados(modelo, contextoEmpresarial);

            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"‚ùå Erro: {ex.Message}");
                Console.ResetColor();
            }
        }

        /// <summary>
        /// Demonstra um workflow complexo entre m√∫ltiplos agentes especializados
        /// </summary>
        private static async Task ExecutarWorkflowAgentesEspecializados(IModel modelo, ContextoEmpresarialComplexo contexto)
        {
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("üîÑ WORKFLOW: AGENTES ESPECIALIZADOS EM PARALELO");
            Console.WriteLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            Console.ResetColor();

            // Agente Analista de Mercado
            var analistaMercado = new AnalistaMercadoLatam(modelo)
                .WithContext(contexto)
                .WithPersona(ctx => $@"
üìä Especialista em mercados da Am√©rica Latina com foco em Fintech!
Mercados-alvo: {string.Join(", ", ctx.CenarioAnalise.MercadosAlvo)}
Sua expertise: sizing, penetra√ß√£o, regulamenta√ß√£o, concorr√™ncia")
                .WithInstructions("Foque em an√°lise quantitativa de mercado e oportunidades")
                .WithTools(new SearchToolPack());

            // Agente Analista Financeiro
            var analistaFinanceiro = new AnalistaFinanceiroEstrategico(modelo)
                .WithContext(contexto)
                .WithPersona(ctx => $@"
üí∞ CFO especialista em expans√£o internacional e modelagem financeira!
Budget: R$ {ctx.CenarioAnalise.InvestimentoDisponivel:N0}
Foco: ROI, CAPEX/OPEX, break-even, cen√°rios de stress")
                .WithInstructions("Construa modelos financeiros robustos com cen√°rios m√∫ltiplos")
                .WithTools(new FinanceToolPack());

            // Agente Especialista em Riscos
            var especialistaRiscos = new EspecialistaRiscosInternacionais(modelo)
                .WithContext(contexto)
                .WithPersona(ctx => $@"
‚ö†Ô∏è Chief Risk Officer com experi√™ncia em expans√£o LatAm!
Risco aceit√°vel: {ctx.CenarioAnalise.RiscoAceitavel}
Expertise: regulat√≥rio, cambial, operacional, reputacional")
                .WithInstructions("Identifique e quantifique todos os riscos potenciais")
                .WithTools(new ReasoningToolPack());

            try
            {
                // Executar an√°lises em paralelo (simulado)
                Console.WriteLine("üîç Analista de Mercado executando...");
                var resultadoMercado = await analistaMercado.ExecuteAsync(
                    "Analise o mercado fintech nos pa√≠ses-alvo: sizing, penetra√ß√£o, concorr√™ncia, barreiras de entrada"
                );

                Console.WriteLine("üí∞ Analista Financeiro executando...");
                var resultadoFinanceiro = await analistaFinanceiro.ExecuteAsync(
                    "Construa modelo financeiro para expans√£o: investimento inicial, proje√ß√µes de receita, break-even por pa√≠s"
                );

                Console.WriteLine("‚ö†Ô∏è Especialista em Riscos executando...");
                var resultadoRiscos = await especialistaRiscos.ExecuteAsync(
                    "Mapeie matriz de riscos: regulat√≥rio, cambial, operacional. Propose estrat√©gias de mitiga√ß√£o"
                );

                // Compilar resultados
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("\n‚úÖ WORKFLOW CONCLU√çDO - COMPILA√á√ÉO DOS RESULTADOS:");
                Console.WriteLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
                Console.ResetColor();

                Console.WriteLine("\nüìä AN√ÅLISE DE MERCADO:");
                Console.WriteLine(new string('-', 40));
                Console.WriteLine(resultadoMercado.Data.Substring(0, Math.Min(300, resultadoMercado.Data.Length)) + "...");

                Console.WriteLine("\nüí∞ MODELAGEM FINANCEIRA:");
                Console.WriteLine(new string('-', 40));
                Console.WriteLine(resultadoFinanceiro.Data.Substring(0, Math.Min(300, resultadoFinanceiro.Data.Length)) + "...");

                Console.WriteLine("\n‚ö†Ô∏è AN√ÅLISE DE RISCOS:");
                Console.WriteLine(new string('-', 40));
                Console.WriteLine(resultadoRiscos.Data.Substring(0, Math.Min(300, resultadoRiscos.Data.Length)) + "...");

                var totalTokens = resultadoMercado.Usage.TotalTokens +
                                resultadoFinanceiro.Usage.TotalTokens +
                                resultadoRiscos.Usage.TotalTokens;
                var totalFunctionCalls = resultadoMercado.Tools.Count +
                                       resultadoFinanceiro.Tools.Count +
                                       resultadoRiscos.Tools.Count;

                Console.WriteLine($"\nüìä M√âTRICAS DO WORKFLOW:");
                Console.WriteLine($"üî¢ Total de tokens: {totalTokens:N0}");
                Console.WriteLine($"‚öôÔ∏è Total de function calls: {totalFunctionCalls}");
                Console.WriteLine($"üë• Agentes especializados: 3");
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"‚ùå Erro no workflow: {ex.Message}");
                Console.ResetColor();
            }
        }

        /// <summary>
        /// Agente de Creative Tech com ToolPacks de design e prototipagem
        /// Demonstra uso avan√ßado de contexto visual e criativo
        /// </summary>
        public static async Task ExecutarCreativeTechAgent(IModel modelo)
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("üé® EXEMPLO 9: CREATIVE TECH AGENT - DESIGN & PROTOTYPING");
            Console.WriteLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            Console.ResetColor();

            Console.WriteLine("üöÄ Demonstra agente criativo com ToolPacks de design, prototipagem e UX");
            Console.WriteLine("üí° Contexto adaptativo e personalidade baseada em brief criativo\n");

            var contextoCriativo = new ContextoCreativeTech
            {
                BriefProjeto = new CreativeBrief
                {
                    Cliente = "Startup FinTech BH",
                    Produto = "App de Investimentos para Jovens",
                    Publico = "18-25 anos, universit√°rios",
                    Vibe = "Modern, trustworthy, gamified",
                    Plataformas = new[] { "iOS", "Android", "Web" },
                    Timeline = TimeSpan.FromDays(21),
                    Budget = "R$ 150.000"
                },
                EstiloPreferencias = new DesignPreferences
                {
                    ColorPalette = "Tech blues, vibrant accents",
                    Typography = "Sans-serif moderna",
                    Layout = "Minimalista com micro-interactions",
                    Inspiration = new[] { "Revolut", "Nubank", "Inter" }
                },
                TechStack = new[] { "React Native", "TypeScript", "Node.js", "PostgreSQL" },
                Deliverables = new[] { "User Journey", "Wireframes", "Prot√≥tipo", "Design System" }
            };

            var creativeTechAgent = new CreativeTechSpecialist(modelo)
                .WithContext(contextoCriativo)
                .WithPersona(ctx => $@"
üé® Voc√™ √© um Creative Technologist premiado com expertise em UX/UI e desenvolvimento!

BRIEF DO PROJETO:
üè¢ Cliente: {ctx.BriefProjeto.Cliente}
üì± Produto: {ctx.BriefProjeto.Produto}
üë• P√∫blico: {ctx.BriefProjeto.Publico}
‚ú® Vibe: {ctx.BriefProjeto.Vibe}
üìÖ Timeline: {ctx.BriefProjeto.Timeline.Days} dias
üí∞ Budget: {ctx.BriefProjeto.Budget}

STACK T√âCNICO: {string.Join(", ", ctx.TechStack)}
INSPIRA√á√ïES: {string.Join(", ", ctx.EstiloPreferencias.Inspiration)}

METODOLOGIA CRIATIVA:
1. RESEARCH & INSIGHTS - Entenda profundamente o usu√°rio
2. CONCEITUA√á√ÉO - Desenvolva conceitos inovadores
3. PROTOTIPAGEM R√ÅPIDA - Teste ideias rapidamente
4. DESIGN SYSTEM - Crie linguagem visual consistente
5. TECHNICAL FEASIBILITY - Valide viabilidade t√©cnica
6. USER TESTING - Teste com usu√°rios reais

Seja criativo, t√©cnico e sempre focado na experi√™ncia do usu√°rio!")
                .WithInstructions(ctx => $@"
Desenvolva {string.Join(", ", ctx.Deliverables)} para {ctx.BriefProjeto.Produto}.
P√∫blico: {ctx.BriefProjeto.Publico}. Timeline: {ctx.BriefProjeto.Timeline.Days} dias.
Use stack: {string.Join(", ", ctx.TechStack)}.")
                .WithGuardRails("Sempre considere acessibilidade e usabilidade. Valide viabilidade t√©cnica.")
                .WithTools(new ReasoningToolPack())
                .WithTools(new SearchToolPack());

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("üî• Projeto: App de investimentos gamificado para universit√°rios");
            Console.ResetColor();
            Console.WriteLine("\nüé® Creative Tech em A√ß√£o:");
            Console.WriteLine(new string('-', 60));

            try
            {
                var resultado = await creativeTechAgent.ExecuteAsync(
                    @"Desenvolva um conceito completo para app de investimentos direcionado a universit√°rios (18-25 anos). 
                    O app deve ser educativo, gamificado e acess√≠vel para iniciantes. Inclua:
                    1. User research insights
                    2. User journey mapping
                    3. Information architecture
                    4. Key features e gamification
                    5. Wireframes principais
                    6. Design system b√°sico
                    7. Prototipo interativo conceitual
                    8. Roadmap t√©cnico de implementa√ß√£o"
                );

                Console.ForegroundColor = ConsoleColor.White;
                Console.WriteLine(resultado.Data);
                Console.ResetColor();

                Console.WriteLine(new string('-', 60));
                Console.WriteLine($"üìä Tokens utilizados: {resultado.Usage.TotalTokens}");
                Console.WriteLine($"üîß Creative tools utilizados: {resultado.Tools.Count}");

                if (resultado.Tools.Count > 0)
                {
                    Console.WriteLine("\nüõ†Ô∏è Ferramentas criativas utilizadas:");
                    foreach (var tool in resultado.Tools)
                    {
                        Console.WriteLine($"   üé® {tool.Name}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"‚ùå Erro: {ex.Message}");
                Console.ResetColor();
            }
        }
    }

    // ==================== CONTEXTOS COMPLEXOS ====================

    // Todas as classes foram movidas para seus pr√≥prios arquivos:
    // - Contexts/ContextoPesquisaComplexo.cs
    // - Contexts/QualityMetrics.cs
    // - Contexts/ContextoEmpresarialComplexo.cs
    // - Contexts/EmpresaInfo.cs
    // - Contexts/CenarioAnalise.cs
    // - Contexts/DiligenceRequirements.cs
    // - Contexts/ContextoCreativeTech.cs
    // - Contexts/CreativeBrief.cs
    // - Contexts/DesignPreferences.cs
    // - Agents/AgentePesquisaAvancado.cs
    // - Agents/ConsultorEstrategicoMultimodal.cs
    // - Agents/AnalistaMercadoLatam.cs
    // - Agents/AnalistaFinanceiroEstrategico.cs
    // - Agents/EspecialistaRiscosInternacionais.cs
    // - Agents/CreativeTechSpecialist.cs
}