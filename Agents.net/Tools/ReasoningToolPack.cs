using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Agents.net.Attributes;
using Agents.net.Core;

namespace Agents.net.Tools
{
    /// <summary>
    /// ToolPack providing reasoning and problem-solving tools
    /// </summary>
    public class ReasoningToolPack : Toolkit
    {
        /// <summary>
        /// Creates a new ReasoningToolPack
        /// </summary>
        /// <param name="name">Name of the tool pack</param>
        /// <param name="cacheResults">Whether to cache tool results (default: true)</param>
        /// <param name="cacheTtl">Cache time-to-live in seconds (default: 300)</param>
        public ReasoningToolPack(
            string name = "reasoning", 
            bool cacheResults = true, 
            int cacheTtl = 300) 
            : base(
                name,
                "Use these tools for reasoning, problem decomposition, and solution evaluation.",
                addInstructions: true,
                cacheResults: cacheResults,
                cacheTtl: cacheTtl)
        {
        }

        /// <summary>
        /// Decomp√µe um problema complexo em sub-problemas menores e mais gerenci√°veis
        /// </summary>
        /// <param name="problema">O problema complexo a ser decomposto</param>
        /// <param name="maxSubproblemas">N√∫mero m√°ximo de sub-problemas a criar (padr√£o: 5)</param>
        [FunctionCall("Decomp√µe um problema complexo em sub-problemas menores e mais gerenci√°veis")]
        [FunctionCallParameter("problema", "O problema complexo a ser decomposto")]
        [FunctionCallParameter("maxSubproblemas", "N√∫mero m√°ximo de sub-problemas a criar (padr√£o: 5)")]
        private async Task<string> DecomporProblemaAsync(string problema, int maxSubproblemas = 5)
        {
            
            var subproblemas = new List<string>();
            var partes = problema.Split(new[] { " e ", " ou ", " ent√£o ", " para ", " com " }, 
                StringSplitOptions.RemoveEmptyEntries);
            
            for (int i = 0; i < Math.Min(partes.Length, maxSubproblemas); i++)
            {
                subproblemas.Add($"Sub-problema {i + 1}: {partes[i].Trim()}");
            }
            
            if (subproblemas.Count == 0)
            {
                subproblemas.Add($"Sub-problema 1: Analisar '{problema}'");
                subproblemas.Add($"Sub-problema 2: Identificar fatores-chave");
                subproblemas.Add($"Sub-problema 3: Desenvolver estrat√©gia de solu√ß√£o");
            }
            
            return $"Problema decomposto em {subproblemas.Count} partes:\n" + 
                   string.Join("\n", subproblemas);
        }

        /// <summary>
        /// Executa uma cadeia de racioc√≠nio passo-a-passo para resolver um problema
        /// </summary>
        /// <param name="questao">O problema ou quest√£o a ser analisada</param>
        /// <param name="contexto">Contexto adicional ou informa√ß√µes relevantes</param>
        [FunctionCall("Executa uma cadeia de racioc√≠nio passo-a-passo para resolver um problema")]
        [FunctionCallParameter("questao", "O problema ou quest√£o a ser analisada")]
        [FunctionCallParameter("contexto", "Contexto adicional ou informa√ß√µes relevantes")]
        private async Task<string> CadeiaRaciocinioAsync(string questao, string contexto = "")
        {
            
            var passos = new List<string>
            {
                $"üéØ **Objetivo**: {questao}",
                $"üìã **Contexto**: {(string.IsNullOrEmpty(contexto) ? "Informa√ß√µes limitadas" : contexto)}",
                "üîç **An√°lise**: Identificando fatores-chave e vari√°veis relevantes",
                "üí≠ **Hip√≥teses**: Considerando diferentes abordagens poss√≠veis",
                "‚öñÔ∏è **Avalia√ß√£o**: Pesando pr√≥s e contras de cada op√ß√£o",
                "üéØ **Conclus√£o**: Direcionando para a melhor solu√ß√£o baseada na an√°lise"
            };
            
            return "**Cadeia de Racioc√≠nio:**\n\n" + string.Join("\n\n", passos);
        }

        /// <summary>
        /// Avalia a qualidade e viabilidade de uma solu√ß√£o proposta
        /// </summary>
        /// <param name="solucao">A solu√ß√£o proposta a ser avaliada</param>
        /// <param name="criterios">Crit√©rios espec√≠ficos de avalia√ß√£o (ex: custo, tempo, efic√°cia)</param>
        [FunctionCall("Avalia a qualidade e viabilidade de uma solu√ß√£o proposta")]
        [FunctionCallParameter("solucao", "A solu√ß√£o proposta a ser avaliada")]
        [FunctionCallParameter("criterios", "Crit√©rios espec√≠ficos de avalia√ß√£o (ex: custo, tempo, efic√°cia)")]
        private async Task<string> AvaliarSolucaoAsync(string solucao, string criterios = "")
        {
            
            var pontuacao = CalcularPontuacao(solucao);
            string nivel;
            if (pontuacao >= 8)
                nivel = "Excelente ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê";
            else if (pontuacao >= 6)
                nivel = "Boa ‚≠ê‚≠ê‚≠ê‚≠ê";
            else if (pontuacao >= 4)
                nivel = "Razo√°vel ‚≠ê‚≠ê‚≠ê";
            else if (pontuacao >= 2)
                nivel = "Fraca ‚≠ê‚≠ê";
            else
                nivel = "Inadequada ‚≠ê";
            
            var avaliacaoDetalhada = new List<string>
            {
                $"**Pontua√ß√£o Geral**: {pontuacao}/10 - {nivel}",
                "",
                "**An√°lise por Dimens√µes**:",
                $"‚Ä¢ Viabilidade T√©cnica: {Math.Min(pontuacao + 1, 10)}/10",
                $"‚Ä¢ Custo-Benef√≠cio: {Math.Max(pontuacao - 1, 1)}/10", 
                $"‚Ä¢ Facilidade de Implementa√ß√£o: {pontuacao}/10",
                $"‚Ä¢ Impacto Esperado: {Math.Min(pontuacao + 2, 10)}/10",
                "",
                "**Recomenda√ß√µes**:",
                pontuacao >= 7 ? "‚úÖ Solu√ß√£o recomendada para implementa√ß√£o" :
                pontuacao >= 5 ? "‚ö†Ô∏è Solu√ß√£o vi√°vel com algumas melhorias necess√°rias" :
                "‚ùå Solu√ß√£o precisa ser reformulada"
            };
            
            if (!string.IsNullOrEmpty(criterios))
            {
                avaliacaoDetalhada.Add("");
                avaliacaoDetalhada.Add($"**Crit√©rios Espec√≠ficos**: {criterios}");
            }
            
            return string.Join("\n", avaliacaoDetalhada);
        }

        /// <summary>
        /// Identifica poss√≠veis obst√°culos e riscos em uma abordagem
        /// </summary>
        /// <param name="abordagem">A abordagem ou plano a ser analisado</param>
        /// <param name="dominio">√Årea ou dom√≠nio espec√≠fico (ex: tecnologia, neg√≥cios, legal)</param>
        [FunctionCall("Identifica poss√≠veis obst√°culos e riscos em uma abordagem")]
        [FunctionCallParameter("abordagem", "A abordagem ou plano a ser analisado")]
        [FunctionCallParameter("dominio", "√Årea ou dom√≠nio espec√≠fico (ex: tecnologia, neg√≥cios, legal)")]
        private async Task<string> IdentificarObstaculosAsync(string abordagem, string dominio = "geral")
        {
            
            var obstaculos = new List<string>
            {
                "**Obst√°culos Potenciais Identificados:**",
                "",
                "üöß **T√©cnicos**:",
                "‚Ä¢ Complexidade de implementa√ß√£o maior que esperada",
                "‚Ä¢ Depend√™ncias externas n√£o consideradas",
                "‚Ä¢ Limita√ß√µes de recursos ou tecnologia",
                "",
                "üí∞ **Financeiros**:",
                "‚Ä¢ Custos ocultos n√£o previstos",
                "‚Ä¢ ROI inferior ao esperado",
                "‚Ä¢ Necessidade de investimentos adicionais",
                "",
                "‚è∞ **Temporais**:",
                "‚Ä¢ Prazos muito otimistas",
                "‚Ä¢ Depend√™ncias que podem causar atrasos",
                "‚Ä¢ Falta de recursos em momentos cr√≠ticos",
                "",
                "üë• **Humanos**:",
                "‚Ä¢ Resist√™ncia √† mudan√ßa",
                "‚Ä¢ Falta de compet√™ncias espec√≠ficas",
                "‚Ä¢ Sobrecarga da equipe",
                "",
                $"**Espec√≠fico para {dominio}**:",
                "‚Ä¢ Regulamenta√ß√µes espec√≠ficas do setor",
                "‚Ä¢ Concorr√™ncia e fatores de mercado",
                "‚Ä¢ Mudan√ßas tecnol√≥gicas r√°pidas"
            };
            
            return string.Join("\n", obstaculos);
        }

        /// <summary>
        /// Gera alternativas criativas para abordar um problema
        /// </summary>
        /// <param name="problema">O problema que precisa de solu√ß√µes alternativas</param>
        /// <param name="numeroAlternativas">N√∫mero de alternativas a gerar (padr√£o: 3)</param>
        [FunctionCall("Gera alternativas criativas para abordar um problema")]
        [FunctionCallParameter("problema", "O problema que precisa de solu√ß√µes alternativas")]
        [FunctionCallParameter("numeroAlternativas", "N√∫mero de alternativas a gerar (padr√£o: 3)")]
        private async Task<string> GerarAlternativasAsync(string problema, int numeroAlternativas = 3)
        {
            
            var abordagens = new List<string>
            {
                "Abordagem Incremental", "Abordagem Revolucion√°ria", "Abordagem Colaborativa",
                "Abordagem Minimalista", "Abordagem Tecnol√≥gica", "Abordagem Tradicional",
                "Abordagem H√≠brida", "Abordagem Outsourcing", "Abordagem DIY"
            };
            
            var alternativas = new List<string> { "**Alternativas Geradas:**", "" };
            
            var random = new Random();
            var abordagensSelecionadas = abordagens.OrderBy(x => random.Next()).Take(numeroAlternativas);
            
            int contador = 1;
            foreach (var abordagem in abordagensSelecionadas)
            {
                alternativas.Add($"**{contador}. {abordagem}**");
                alternativas.Add($"   üìù Descri√ß√£o: Solu√ß√£o baseada em princ√≠pios de {abordagem.Split(' ')[1].ToLower()}");
                alternativas.Add($"   ‚ö° Vantagem: Oferece uma perspectiva √∫nica para '{problema}'");
                alternativas.Add($"   ‚ö†Ô∏è Considera√ß√£o: Requer an√°lise espec√≠fica de viabilidade");
                alternativas.Add("");
                contador++;
            }
            
            return string.Join("\n", alternativas);
        }

        private static int CalcularPontuacao(string solucao)
        {
            var pontuacao = 5; // Base
            
            // Fatores que aumentam a pontua√ß√£o
            if (solucao.Contains("espec√≠fic") || solucao.Contains("detalh")) pontuacao += 1;
            if (solucao.Contains("vi√°vel") || solucao.Contains("pr√°tico")) pontuacao += 1;
            if (solucao.Contains("custo") || solucao.Contains("econ√¥mic")) pontuacao += 1;
            if (solucao.Length > 100) pontuacao += 1; // Solu√ß√µes mais elaboradas
            if (solucao.Contains("etap") || solucao.Contains("passo")) pontuacao += 1;
            
            // Fatores que diminuem a pontua√ß√£o
            if (solucao.Contains("imposs√≠vel") || solucao.Contains("dif√≠cil")) pontuacao -= 2;
            if (solucao.Length < 50) pontuacao -= 1; // Solu√ß√µes muito vagas
            
            return Math.Max(1, Math.Min(10, pontuacao));
        }
    }
} 