name: Build, Test and Publish to GitHub Packages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: dotnet test AgentSharp.Tests/AgentSharp.Tests.csproj --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage --settings test.runsettings
        continue-on-error: true

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.26
        with:
          reports: './coverage/**/*.xml'
          targetdir: './coverage-report'
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura;JsonSummary'
          verbosity: 'Info'

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          fail_ci_if_error: false

      - name: Check coverage threshold
        run: |
          echo "üìä Checking code coverage..."
          if [ -f "./coverage-report/Summary.json" ]; then
            COVERAGE=$(grep -oP '"linecoverage":\s*\K[\d.]+' ./coverage-report/Summary.json)
            echo "Current line coverage: ${COVERAGE}%"
            if [ $(echo "$COVERAGE >= 70" | bc -l) ]; then
              echo "‚úÖ Coverage threshold met (‚â•70%)"
            else
              echo "‚ö†Ô∏è Coverage below threshold (70%), but continuing..."
            fi
          else
            echo "‚ö†Ô∏è Coverage report not found, continuing without coverage check"
          fi

  publish:
    name: Pack and Publish
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build AgentSharp
        run: dotnet build AgentSharp/AgentSharp.csproj --no-restore --configuration Release

      - name: Run tests one more time before publish
        run: dotnet test AgentSharp.Tests/AgentSharp.Tests.csproj --no-build --configuration Release --verbosity minimal

      - name: Validate documentation
        run: |
          echo "üìö Validating project documentation..."
          if [ ! -f "README.md" ]; then
            echo "‚ùå README.md not found"
            exit 1
          fi
          echo "‚úÖ README.md found"
          
          if [ ! -f "LICENSE" ]; then
            echo "‚ùå LICENSE file not found"
            exit 1
          fi
          echo "‚úÖ LICENSE file found"

      - name: Pack AgentSharp
        run: dotnet pack AgentSharp/AgentSharp.csproj --no-build --configuration Release --output ./nupkg

      - name: Validate package
        run: |
          echo "Validating generated packages..."
          ls -la ./nupkg/
          dotnet nuget verify ./nupkg/*.nupkg

      - name: Add GitHub NuGet Source
        run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Publish to GitHub Packages
        run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source "github" --skip-duplicate

      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nuget-packages
          path: ./nupkg/*.nupkg