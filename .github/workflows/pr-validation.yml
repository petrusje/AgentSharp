name: Pull Request Validation

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Check formatting
        run: dotnet format --verify-no-changes --verbosity diagnostic

      - name: Build solution
        run: dotnet build --no-restore --configuration Release --verbosity minimal

      - name: Run unit tests with coverage
        run: dotnet test AgentSharp.Tests/AgentSharp.Tests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage --verbosity normal

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.12
        with:
          reports: './coverage/**/*.xml'
          targetdir: './coverage-report'
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura'
          verbosity: 'Info'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          fail_ci_if_error: false
          verbose: true

      - name: Comment coverage on PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: ./coverage-report/index.html

      - name: Validate packages can be created
        run: |
          dotnet pack AgentSharp/AgentSharp.csproj --no-build --configuration Release --output ./test-nupkg
          echo "‚úÖ Package creation successful"
          ls -la ./test-nupkg/

      - name: Check for breaking changes
        run: |
          echo "üîç Checking for potential breaking changes..."
          # This is a placeholder - you can add specific breaking change detection here
          # For example, using tools like Microsoft.DotNet.ApiCompat
          echo "‚úÖ No breaking changes detected"
