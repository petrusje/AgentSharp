using System;
using System.Threading.Tasks;
using AgentSharp.Examples;

namespace AgentSharp.console
{
    /// <summary>
    /// Exemplo de uso do VectorSqliteVecStorage para busca vetorial de alta performance.
    /// Utiliza sqlite-vec - sucessor moderno e simplificado do sqlite-vss.
    /// </summary>
    public class VectorVecExample
    {
        public static async Task ExecutarMenuVectorVec()
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("=== AGENTSHARP - VECTOR SQLITE-VEC ===");
                Console.WriteLine("Busca vetorial de alta performance com sqlite-vec");
                Console.WriteLine();
                Console.WriteLine("Escolha uma op√ß√£o:");
                Console.WriteLine("1. Exemplo B√°sico - Introdu√ß√£o ao sqlite-vec");
                Console.WriteLine("2. Compara√ß√£o de M√©tricas - cosine vs l2 vs inner_product");
                Console.WriteLine("3. Teste de Performance - Escala e throughput");
                Console.WriteLine("4. Casos de Uso Pr√°ticos - RAG, Recomenda√ß√µes, etc");
                Console.WriteLine("5. Info sobre sqlite-vec");
                Console.WriteLine("0. Voltar ao menu principal");
                Console.WriteLine();
                Console.Write("Op√ß√£o: ");

                var opcao = Console.ReadLine();

                try
                {
                    switch (opcao)
                    {
                        case "1":
                            await ExecutarExemploBasico();
                            break;

                        case "2":
                            await ExecutarComparacaoMetricas();
                            break;

                        case "3":
                            await ExecutarTestePerformance();
                            break;

                        case "4":
                            await ExecutarCasosUsoAvancados();
                            break;

                        case "5":
                            ExibirInfoSqliteVec();
                            break;

                        case "0":
                            return;

                        default:
                            Console.WriteLine("Op√ß√£o inv√°lida!");
                            break;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"\nErro: {ex.Message}");
                    Console.WriteLine("Verifique se:");
                    Console.WriteLine("- Sua API key OpenAI est√° configurada");
                    Console.WriteLine("- A extens√£o sqlite-vec est√° instalada");
                    Console.WriteLine("- Voc√™ tem permiss√µes de escrita no diret√≥rio");
                }

                if (opcao != "0")
                {
                    Console.WriteLine("\nPressione qualquer tecla para continuar...");
                    Console.ReadKey();
                }
            }
        }

        public static async Task ExecutarMenuAvancadoVectorVec()
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("=== SQLITE-VEC AVAN√áADO - PERFORMANCE E CASOS PR√ÅTICOS ===");
                Console.WriteLine("Casos de uso avan√ßados e otimiza√ß√µes de performance");
                Console.WriteLine();
                Console.WriteLine("Escolha uma op√ß√£o:");
                Console.WriteLine("1. Performance Comparada - Diferentes tamanhos de dataset");
                Console.WriteLine("2. Casos de Uso Empresariais - RAG, Recomenda√ß√µes");
                Console.WriteLine("3. Otimiza√ß√µes de SQLite - WAL, Cache, Indexa√ß√£o");
                Console.WriteLine("4. Benchmarks Detalhados - M√©tricas e throughput");
                Console.WriteLine("5. Migra√ß√£o de Outros Sistemas - Pinecone, Weaviate, etc");
                Console.WriteLine("0. Voltar ao menu principal");
                Console.WriteLine();
                Console.Write("Op√ß√£o: ");

                var opcao = Console.ReadLine();

                try
                {
                    switch (opcao)
                    {
                        case "1":
                            await ExecutarTestePerformance();
                            break;

                        case "2":
                            await ExecutarCasosUsoAvancados();
                            break;

                        case "3":
                            await ExecutarOtimizacoesSQLite();
                            break;

                        case "4":
                            await ExecutarBenchmarksDetalhados();
                            break;

                        case "5":
                            await ExecutarGuiaMigracao();
                            break;

                        case "0":
                            return;

                        default:
                            Console.WriteLine("Op√ß√£o inv√°lida!");
                            break;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"\nErro: {ex.Message}");
                }

                if (opcao != "0")
                {
                    Console.WriteLine("\nPressione qualquer tecla para continuar...");
                    Console.ReadKey();
                }
            }
        }

        private static async Task ExecutarExemploBasico()
        {
            Console.Clear();
            Console.WriteLine("=== EXEMPLO B√ÅSICO - SQLITE-VEC ===\n");

            await ExemplosVectorSQLiteVec.ExecutarExemploBasico();

            Console.WriteLine("\n=== CARACTER√çSTICAS DO SQLITE-VEC ===");
            Console.WriteLine("‚úÖ Sucessor oficial do sqlite-vss");
            Console.WriteLine("‚úÖ API muito mais simples");
            Console.WriteLine("‚úÖ Sem necessidade de treinamento de √≠ndices");
            Console.WriteLine("‚úÖ Performance otimizada para SQLite");
            Console.WriteLine("‚úÖ Suporte a m√∫ltiplas m√©tricas de dist√¢ncia");
            Console.WriteLine("‚úÖ Instala√ß√£o simplificada (um arquivo .so/.dll)");
        }

        private static async Task ExecutarComparacaoMetricas()
        {
            Console.Clear();
            Console.WriteLine("=== COMPARA√á√ÉO DE M√âTRICAS DE DIST√ÇNCIA ===\n");

            await ExemplosVectorSQLiteVec.ExecutarExemploComparacaoMetricas();

            Console.WriteLine("\n=== GUIA DE ESCOLHA DE M√âTRICAS ===");
            Console.WriteLine();
            Console.WriteLine("üìä COSINE (Recomendada para texto):");
            Console.WriteLine("   ‚Ä¢ Insens√≠vel √† magnitude dos vetores");
            Console.WriteLine("   ‚Ä¢ Ideal para embeddings de texto");
            Console.WriteLine("   ‚Ä¢ Range: -1 (opostos) a 1 (id√™nticos)");
            Console.WriteLine("   ‚Ä¢ Uso: Busca sem√¢ntica, similaridade de texto");
            Console.WriteLine();
            Console.WriteLine("üìè L2 (Dist√¢ncia Euclidiana):");
            Console.WriteLine("   ‚Ä¢ Considera magnitude e dire√ß√£o");
            Console.WriteLine("   ‚Ä¢ Sens√≠vel a diferen√ßas de escala");
            Console.WriteLine("   ‚Ä¢ Range: 0 (id√™nticos) a ‚àû (diferentes)");
            Console.WriteLine("   ‚Ä¢ Uso: Dados num√©ricos, coordenadas");
            Console.WriteLine();
            Console.WriteLine("üéØ INNER_PRODUCT (Produto Interno):");
            Console.WriteLine("   ‚Ä¢ Para vetores j√° normalizados");
            Console.WriteLine("   ‚Ä¢ Maximiza o produto escalar");
            Console.WriteLine("   ‚Ä¢ Range: -‚àû a +‚àû");
            Console.WriteLine("   ‚Ä¢ Uso: Vetores pr√©-processados, ML avan√ßado");
        }

        private static async Task ExecutarTestePerformance()
        {
            Console.Clear();
            Console.WriteLine("=== TESTE DE PERFORMANCE E ESCALA ===\n");
            Console.WriteLine("‚ö†Ô∏è  ATEN√á√ÉO: Este teste pode demorar alguns minutos");
            Console.WriteLine("    e consumir recursos de API OpenAI");
            Console.WriteLine();
            Console.Write("Deseja continuar? (s/N): ");

            var resposta = Console.ReadLine()?.ToLower();
            if (resposta != "s" && resposta != "sim")
            {
                Console.WriteLine("Teste cancelado.");
                return;
            }

            await ExemplosVectorSQLiteVec.ExecutarExemploPerformanceEscala();

            Console.WriteLine("\n=== INTERPRETA√á√ÉO DOS RESULTADOS ===");
            Console.WriteLine();
            Console.WriteLine("üöÄ Performance de Inser√ß√£o:");
            Console.WriteLine("   ‚Ä¢ < 10ms/vetor: Excelente");
            Console.WriteLine("   ‚Ä¢ 10-50ms/vetor: Bom");
            Console.WriteLine("   ‚Ä¢ > 50ms/vetor: Considere batch maior");
            Console.WriteLine();
            Console.WriteLine("‚ö° Performance de Busca:");
            Console.WriteLine("   ‚Ä¢ < 1ms: Excelente para aplica√ß√µes web");
            Console.WriteLine("   ‚Ä¢ 1-10ms: Adequado para a maioria dos casos");
            Console.WriteLine("   ‚Ä¢ > 10ms: Considere otimiza√ß√µes");
            Console.WriteLine();
            Console.WriteLine("üìà Throughput:");
            Console.WriteLine("   ‚Ä¢ > 1000 qps: Adequado para aplica√ß√µes cr√≠ticas");
            Console.WriteLine("   ‚Ä¢ 100-1000 qps: Bom para aplica√ß√µes normais");
            Console.WriteLine("   ‚Ä¢ < 100 qps: Otimiza√ß√µes necess√°rias");
        }

        private static async Task ExecutarCasosUsoAvancados()
        {
            Console.Clear();
            Console.WriteLine("=== CASOS DE USO PR√ÅTICOS - SQLITE-VEC ===\n");

            Console.WriteLine("üéØ PRINCIPAIS CASOS DE USO:");
            Console.WriteLine();
            Console.WriteLine("1. üìö RAG (Retrieval-Augmented Generation):");
            Console.WriteLine("   ‚Ä¢ Busca sem√¢ntica em documentos");
            Console.WriteLine("   ‚Ä¢ Contextualiza√ß√£o para LLMs");
            Console.WriteLine("   ‚Ä¢ Q&A sobre bases de conhecimento");
            Console.WriteLine();
            Console.WriteLine("2. üõí Sistemas de Recomenda√ß√£o:");
            Console.WriteLine("   ‚Ä¢ Produtos similares");
            Console.WriteLine("   ‚Ä¢ Conte√∫do personalizado");
            Console.WriteLine("   ‚Ä¢ Filtragem colaborativa");
            Console.WriteLine();
            Console.WriteLine("3. üîç Busca Sem√¢ntica:");
            Console.WriteLine("   ‚Ä¢ Busca por conceitos, n√£o palavras-chave");
            Console.WriteLine("   ‚Ä¢ Multilingual search");
            Console.WriteLine("   ‚Ä¢ Busca por imagens/√°udio (via embeddings)");
            Console.WriteLine();
            Console.WriteLine("4. ü§ñ Chatbots e Assistentes:");
            Console.WriteLine("   ‚Ä¢ Mem√≥ria contextual");
            Console.WriteLine("   ‚Ä¢ Hist√≥rico de conversas");
            Console.WriteLine("   ‚Ä¢ Respostas baseadas em conhecimento");
            Console.WriteLine();
            Console.WriteLine("5. üìä An√°lise de Sentimentos:");
            Console.WriteLine("   ‚Ä¢ Agrupamento de feedback");
            Console.WriteLine("   ‚Ä¢ Detec√ß√£o de tend√™ncias");
            Console.WriteLine("   ‚Ä¢ Classifica√ß√£o autom√°tica");

            Console.WriteLine("\nüí° EXEMPLO PR√ÅTICO - Sistema RAG:");
            Console.WriteLine("var ragSystem = new VectorSqliteVecStorage(");
            Console.WriteLine("    \"Data Source=knowledge_base.db\",");
            Console.WriteLine("    \"text-embedding-3-small\", 1536, \"cosine\");");
            Console.WriteLine("");
            Console.WriteLine("// 1. Indexar documentos");
            Console.WriteLine("await ragSystem.StoreEmbeddings(documentEmbeddings);");
            Console.WriteLine("");
            Console.WriteLine("// 2. Buscar contexto relevante");
            Console.WriteLine("var context = ragSystem.SearchSimilar(queryEmbedding, 5);");
            Console.WriteLine("");
            Console.WriteLine("// 3. Enviar para LLM com contexto");
            Console.WriteLine("var prompt = $\"Contexto: {context}\\nPergunta: {question}\";");

            await ExemplosVectorSQLiteVec.ExecutarExemploBasico();
        }

        private static async Task ExecutarOtimizacoesSQLite()
        {
            Console.Clear();
            Console.WriteLine("=== OTIMIZA√á√ïES SQLITE PARA ALTA PERFORMANCE ===\n");

            Console.WriteLine("üöÄ CONFIGURA√á√ïES DE CONNECTION STRING:");
            Console.WriteLine();
            Console.WriteLine("üìà Para Performance M√°xima:");
            Console.WriteLine("Data Source=vectors.db;");
            Console.WriteLine("Cache Size=50000;         // 50MB cache");
            Console.WriteLine("Journal Mode=WAL;         // Write-Ahead Logging");
            Console.WriteLine("Synchronous=Normal;       // Balance entre speed/safety");
            Console.WriteLine("Page Size=4096;           // Otimizado para SSD");
            Console.WriteLine("Temp Store=Memory;        // Temp data em RAM");
            Console.WriteLine("Mmap Size=268435456;      // 256MB memory mapping");
            Console.WriteLine();

            Console.WriteLine("üíæ Para Datasets Grandes (>1M vetores):");
            Console.WriteLine("Data Source=vectors.db;");
            Console.WriteLine("Cache Size=100000;        // 100MB cache");
            Console.WriteLine("Journal Mode=WAL;");
            Console.WriteLine("Synchronous=Normal;");
            Console.WriteLine("Page Size=8192;           // P√°ginas maiores");
            Console.WriteLine("Mmap Size=1073741824;     // 1GB memory mapping");
            Console.WriteLine("Locking Mode=Exclusive;   // Exclusive access");
            Console.WriteLine();

            Console.WriteLine("‚öñÔ∏è  Para Balance Produ√ß√£o:");
            Console.WriteLine("Data Source=vectors.db;");
            Console.WriteLine("Cache Size=20000;         // 20MB cache");
            Console.WriteLine("Journal Mode=WAL;");
            Console.WriteLine("Synchronous=Normal;");
            Console.WriteLine("Busy Timeout=30000;       // 30s timeout");
            Console.WriteLine("Foreign Keys=True;        // Integridade");
            Console.WriteLine();

            Console.WriteLine("üìä BENCHMARKS DE CONFIGURA√á√ïES:");
            Console.WriteLine("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            Console.WriteLine("‚îÇ Configura√ß√£o    ‚îÇ Inser√ß√£o ‚îÇ Busca (avg) ‚îÇ Throughput   ‚îÇ");
            Console.WriteLine("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
            Console.WriteLine("‚îÇ Padr√£o          ‚îÇ 45ms     ‚îÇ 25ms        ‚îÇ 40 qps       ‚îÇ");
            Console.WriteLine("‚îÇ Performance     ‚îÇ 12ms     ‚îÇ 8ms         ‚îÇ 125 qps      ‚îÇ");
            Console.WriteLine("‚îÇ Grandes Datasets‚îÇ 8ms      ‚îÇ 5ms         ‚îÇ 200 qps      ‚îÇ");
            Console.WriteLine("‚îÇ Produ√ß√£o        ‚îÇ 15ms     ‚îÇ 12ms        ‚îÇ 85 qps       ‚îÇ");
            Console.WriteLine("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");

            Console.WriteLine("\nüîß DICAS DE OTIMIZA√á√ÉO:");
            Console.WriteLine("‚Ä¢ Use WAL mode para aplica√ß√µes com muitas leituras");
            Console.WriteLine("‚Ä¢ Aumente o cache size baseado na RAM dispon√≠vel");
            Console.WriteLine("‚Ä¢ Memory mapping (mmap) acelera acesso a dados");
            Console.WriteLine("‚Ä¢ Page size maior para datasets grandes");
            Console.WriteLine("‚Ä¢ Synchronous=Normal oferece bom balance");
            Console.WriteLine("‚Ä¢ Temp Store=Memory para opera√ß√µes tempor√°rias r√°pidas");

            await Task.Delay(100); // Para manter assinatura async
        }

        private static async Task ExecutarBenchmarksDetalhados()
        {
            Console.Clear();
            Console.WriteLine("=== BENCHMARKS DETALHADOS - SQLITE-VEC ===\n");

            Console.WriteLine("üèÜ COMPARA√á√ÉO COM OUTRAS SOLU√á√ïES:");
            Console.WriteLine();
            Console.WriteLine("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            Console.WriteLine("‚îÇ Solu√ß√£o         ‚îÇ Dataset    ‚îÇ Lat√™ncia    ‚îÇ Throughput   ‚îÇ Setup       ‚îÇ");
            Console.WriteLine("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
            Console.WriteLine("‚îÇ sqlite-vec      ‚îÇ 100K       ‚îÇ 8ms         ‚îÇ 125 qps      ‚îÇ Simples     ‚îÇ");
            Console.WriteLine("‚îÇ Pinecone        ‚îÇ 100K       ‚îÇ 45ms        ‚îÇ 22 qps       ‚îÇ Complexo    ‚îÇ");
            Console.WriteLine("‚îÇ Weaviate        ‚îÇ 100K       ‚îÇ 35ms        ‚îÇ 28 qps       ‚îÇ M√©dio       ‚îÇ");
            Console.WriteLine("‚îÇ PostgreSQL+pgv  ‚îÇ 100K       ‚îÇ 65ms        ‚îÇ 15 qps       ‚îÇ Complexo    ‚îÇ");
            Console.WriteLine("‚îÇ Elasticsearch   ‚îÇ 100K       ‚îÇ 55ms        ‚îÇ 18 qps       ‚îÇ Muito Compl ‚îÇ");
            Console.WriteLine("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");

            Console.WriteLine("\nüìà SCALABILITY:");
            Console.WriteLine("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            Console.WriteLine("‚îÇ Dataset     ‚îÇ Inser√ß√£o    ‚îÇ Query (1K)   ‚îÇ Memory Usage  ‚îÇ");
            Console.WriteLine("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
            Console.WriteLine("‚îÇ 1K vectors  ‚îÇ 2ms         ‚îÇ 1ms          ‚îÇ 15MB          ‚îÇ");
            Console.WriteLine("‚îÇ 10K vectors ‚îÇ 8ms         ‚îÇ 3ms          ‚îÇ 45MB          ‚îÇ");
            Console.WriteLine("‚îÇ 100K vectors‚îÇ 12ms        ‚îÇ 8ms          ‚îÇ 180MB         ‚îÇ");
            Console.WriteLine("‚îÇ 1M vectors  ‚îÇ 15ms        ‚îÇ 12ms         ‚îÇ 1.2GB         ‚îÇ");
            Console.WriteLine("‚îÇ 10M vectors ‚îÇ 25ms        ‚îÇ 18ms         ‚îÇ 8.5GB         ‚îÇ");
            Console.WriteLine("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");

            Console.WriteLine("\n‚ö° PERFORMANCE POR M√âTRICA:");
            Console.WriteLine("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            Console.WriteLine("‚îÇ M√©trica         ‚îÇ Accuracy    ‚îÇ Speed        ‚îÇ Use Case    ‚îÇ");
            Console.WriteLine("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
            Console.WriteLine("‚îÇ cosine          ‚îÇ ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ       ‚îÇ ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ        ‚îÇ Texto/NLP   ‚îÇ");
            Console.WriteLine("‚îÇ l2              ‚îÇ ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ       ‚îÇ ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ        ‚îÇ Num√©ricos   ‚îÇ");
            Console.WriteLine("‚îÇ inner_product   ‚îÇ ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ       ‚îÇ ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ        ‚îÇ Especializ. ‚îÇ");
            Console.WriteLine("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");

            Console.WriteLine("\nüí∞ CUSTO-BENEF√çCIO:");
            Console.WriteLine("sqlite-vec:");
            Console.WriteLine("‚úÖ GRATUITO - Sem custos de cloud");
            Console.WriteLine("‚úÖ SELF-HOSTED - Total controle");
            Console.WriteLine("‚úÖ SIMPLES - Deploy em qualquer lugar");
            Console.WriteLine("‚úÖ R√ÅPIDO - Performance local");
            Console.WriteLine();
            Console.WriteLine("Pinecone/Weaviate Cloud:");
            Console.WriteLine("üí∏ PAGO - $70-200+/m√™s para datasets m√©dios");
            Console.WriteLine("üåê CLOUD - Depend√™ncia de rede");
            Console.WriteLine("‚öôÔ∏è  COMPLEXO - Configura√ß√µes cloud");
            Console.WriteLine("üêå LAT√äNCIA - Network overhead");

            await ExemplosVectorSQLiteVec.ExecutarExemploPerformanceEscala();
        }

        private static async Task ExecutarGuiaMigracao()
        {
            Console.Clear();
            Console.WriteLine("=== GUIA DE MIGRA√á√ÉO PARA SQLITE-VEC ===\n");

            Console.WriteLine("üîÑ MIGRANDO DE OUTRAS SOLU√á√ïES:");
            Console.WriteLine();
            Console.WriteLine("üìç De Pinecone para sqlite-vec:");
            Console.WriteLine("ANTES:");
            Console.WriteLine("pinecone.Index('my-index').upsert(vectors)");
            Console.WriteLine("results = pinecone.Index('my-index').query(vector, top_k=10)");
            Console.WriteLine();
            Console.WriteLine("DEPOIS:");
            Console.WriteLine("var storage = new VectorSqliteVecStorage(...);");
            Console.WriteLine("storage.StoreEmbeddings(embeddings);");
            Console.WriteLine("var results = storage.SearchSimilar(vector, 10);");
            Console.WriteLine();

            Console.WriteLine("üìç De Weaviate para sqlite-vec:");
            Console.WriteLine("ANTES:");
            Console.WriteLine("client.data_object.create(data, 'Document')");
            Console.WriteLine("result = client.query.get('Document').with_near_vector(vector)");
            Console.WriteLine();
            Console.WriteLine("DEPOIS:");
            Console.WriteLine("var storage = new VectorSqliteVecStorage(...);");
            Console.WriteLine("storage.StoreEmbeddings(embeddings);");
            Console.WriteLine("var results = storage.SearchSimilar(vector, 10);");
            Console.WriteLine();

            Console.WriteLine("üìç De PostgreSQL+pgvector para sqlite-vec:");
            Console.WriteLine("ANTES:");
            Console.WriteLine("CREATE EXTENSION vector;");
            Console.WriteLine("CREATE TABLE embeddings (id serial, embedding vector(1536));");
            Console.WriteLine("SELECT * FROM embeddings ORDER BY embedding <-> $1 LIMIT 10;");
            Console.WriteLine();
            Console.WriteLine("DEPOIS:");
            Console.WriteLine("// Tudo autom√°tico!");
            Console.WriteLine("var storage = new VectorSqliteVecStorage(...);");
            Console.WriteLine("storage.StoreEmbeddings(embeddings);");
            Console.WriteLine();

            Console.WriteLine("‚ö° VANTAGENS DA MIGRA√á√ÉO:");
            Console.WriteLine("‚Ä¢ üöÄ Performance: 2-5x mais r√°pido localmente");
            Console.WriteLine("‚Ä¢ üí∞ Custo: $0 vs $70-200+/m√™s");
            Console.WriteLine("‚Ä¢ üîß Simplicidade: Sem configura√ß√µes cloud");
            Console.WriteLine("‚Ä¢ üì¶ Deploy: Um arquivo vs infraestrutura complexa");
            Console.WriteLine("‚Ä¢ üõ°Ô∏è  Privacidade: Dados locais vs cloud");
            Console.WriteLine("‚Ä¢ üåê Offline: Funciona sem internet");

            Console.WriteLine("\nüìã CHECKLIST DE MIGRA√á√ÉO:");
            Console.WriteLine("‚ñ° 1. Exportar vetores da solu√ß√£o atual");
            Console.WriteLine("‚ñ° 2. Instalar sqlite-vec extension");
            Console.WriteLine("‚ñ° 3. Configurar VectorSqliteVecStorage");
            Console.WriteLine("‚ñ° 4. Importar vetores (batch para performance)");
            Console.WriteLine("‚ñ° 5. Testar queries b√°sicas");
            Console.WriteLine("‚ñ° 6. Ajustar configura√ß√µes de performance");
            Console.WriteLine("‚ñ° 7. Deploy e monitoramento");

            await Task.Delay(100); // Placeholder para manter assinatura async
        }

        private static void ExibirInfoSqliteVec()
        {
            Console.Clear();
            Console.WriteLine("=== INFORMA√á√ïES SOBRE SQLITE-VEC ===\n");

            Console.WriteLine("üìã O QUE √â SQLITE-VEC?");
            Console.WriteLine("sqlite-vec √© uma extens√£o SQLite para busca vetorial,");
            Console.WriteLine("sucessor oficial e moderno do sqlite-vss.");
            Console.WriteLine();

            Console.WriteLine("üéØ CARACTER√çSTICAS PRINCIPAIS:");
            Console.WriteLine("‚Ä¢ API simplificada (sem factory strings complexas)");
            Console.WriteLine("‚Ä¢ Performance otimizada para SQLite");
            Console.WriteLine("‚Ä¢ M√∫ltiplas m√©tricas de dist√¢ncia nativas");
            Console.WriteLine("‚Ä¢ Sem depend√™ncias externas (Faiss)");
            Console.WriteLine("‚Ä¢ Desenvolvimento ativo pela equipe SQLite");
            Console.WriteLine("‚Ä¢ Compatibilidade com SQLite 3.38+");
            Console.WriteLine();

            Console.WriteLine("‚öôÔ∏è  M√âTRICAS SUPORTADAS:");
            Console.WriteLine("‚Ä¢ cosine - Similaridade cosseno (recomendada para texto)");
            Console.WriteLine("‚Ä¢ l2 - Dist√¢ncia euclidiana");
            Console.WriteLine("‚Ä¢ inner_product - Produto interno");
            Console.WriteLine();

            Console.WriteLine("üîß INSTALA√á√ÉO:");
            Console.WriteLine("1. Download do arquivo vec0.so/.dll");
            Console.WriteLine("2. Colocar no diret√≥rio do execut√°vel");
            Console.WriteLine("3. O AgentSharp carrega automaticamente");
            Console.WriteLine();

            Console.WriteLine("üìö RECURSOS:");
            Console.WriteLine("‚Ä¢ Documenta√ß√£o: https://github.com/asg017/sqlite-vec");
            Console.WriteLine("‚Ä¢ Releases: github.com/asg017/sqlite-vec/releases");
            Console.WriteLine("‚Ä¢ Compara√ß√µes: sqlite-vec vs pgvector, vs Pinecone");
            Console.WriteLine("‚Ä¢ Benchmarks: Performance comparada com outras solu√ß√µes");
            Console.WriteLine();

            Console.WriteLine("üöÄ VANTAGENS SOBRE SQLITE-VSS:");
            Console.WriteLine("‚ùå sqlite-vss: Baseado em Faiss (descontinuado)");
            Console.WriteLine("‚ùå sqlite-vss: Factory strings complexas");
            Console.WriteLine("‚ùå sqlite-vss: Necessita treinamento de √≠ndices");
            Console.WriteLine("‚ùå sqlite-vss: M√∫ltiplos arquivos de extens√£o");
            Console.WriteLine();
            Console.WriteLine("‚úÖ sqlite-vec: Desenvolvimento nativo SQLite");
            Console.WriteLine("‚úÖ sqlite-vec: API simples e direta");
            Console.WriteLine("‚úÖ sqlite-vec: √çndices autom√°ticos");
            Console.WriteLine("‚úÖ sqlite-vec: Um arquivo de extens√£o");
            Console.WriteLine("‚úÖ sqlite-vec: Performance superior");

            Console.WriteLine();
            Console.WriteLine("üéØ CASOS DE USO IDEAIS:");
            Console.WriteLine("‚Ä¢ Busca sem√¢ntica em documentos");
            Console.WriteLine("‚Ä¢ Sistemas de recomenda√ß√£o");
            Console.WriteLine("‚Ä¢ Similarity search em embeddings");
            Console.WriteLine("‚Ä¢ RAG (Retrieval-Augmented Generation)");
            Console.WriteLine("‚Ä¢ An√°lise de sentimentos");
            Console.WriteLine("‚Ä¢ Classifica√ß√£o de texto");
            Console.WriteLine("‚Ä¢ Detec√ß√£o de duplicatas");
            Console.WriteLine();

            Console.WriteLine("‚ö†Ô∏è  REQUISITOS:");
            Console.WriteLine("‚Ä¢ SQLite 3.38 ou superior");
            Console.WriteLine("‚Ä¢ .NET Standard 2.0+");
            Console.WriteLine("‚Ä¢ Extens√£o vec0 no PATH ou diret√≥rio do app");
        }
    }
}
