using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Xunit;
using AgentSharp.Core.Orchestration;
using AgentSharp.Core;
using AgentSharp.Core.Logging;
using AgentSharp.Models;
using Microsoft.Extensions.Logging;

namespace AgentSharp.Tests.Core.Orchestration
{
    /// <summary>
    /// Testes específicos para o algoritmo inteligente de seleção de agentes do TeamChat
    /// </summary>
    public class TeamChatAgentSelectionTests
    {
        private readonly ILogger _logger = new ConsoleLogger();

        #region Helpers

        private TeamChat<string> CreateTeamChatWithAgents()
        {
            var teamChat = new TeamChat<string>("TestTeamChat", _logger)
                .EnableDebugMode(true);

            // Configurar variáveis globais
            teamChat.WithGlobalVariables(builder =>
            {
                builder
                    .Add("customer_name", "reception", "Nome do cliente", required: true)
                    .Add("customer_email", "reception", "Email do cliente", required: true)
                    .Add("issue_description", "support", "Descrição do problema", required: true)
                    .Add("priority_level", "support", "Nível de prioridade", required: false)
                    .Add("resolution_plan", "technical", "Plano de resolução técnica", required: true)
                    .AddShared("notes", "Anotações gerais", required: false);
            });

            return teamChat;
        }

        private IAgent CreateMockAgent(string name)
        {
            return new MockAgent(name);
        }

        private class MockAgent : IAgent
        {
            private readonly string _name;
            private object _context;
            private readonly List<AIMessage> _messageHistory = new List<AIMessage>();

            public MockAgent(string name)
            {
                _name = name;
            }

            public string Name => _name;
            public string description => $"Mock agent {_name} for testing purposes";

            public void setContext(object context)
            {
                _context = context;
            }

            public string GetSystemPrompt()
            {
                var basePrompt = $"You are {_name}, a test agent.";
                if (_context != null)
                {
                    basePrompt += $" Context: {_context}";
                }
                return basePrompt;
            }

            public List<AIMessage> GetMessageHistory()
            {
                return new List<AIMessage>(_messageHistory);
            }

            public async Task<object> ExecuteAsync(string prompt, object context = null, List<AIMessage> messageHistory = null, CancellationToken cancellationToken = default)
            {
                await Task.Delay(10, cancellationToken); // Simular processamento
                
                var response = $"Response from {_name}: {prompt}";
                
                // Adicionar à história de mensagens
                if (messageHistory != null)
                {
                    _messageHistory.AddRange(messageHistory);
                }
                _messageHistory.Add(new AIMessage { Role = Role.Assistant, Content = response });
                
                return response;
            }
        }

        #endregion

        #region Testes de Configuração de Agentes

        [Fact]
        public void TeamChat_WithAgent_BasicConfiguration_AddsAgentCorrectly()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();
            var agent = CreateMockAgent("TestAgent");

            // Act
            teamChat.WithAgent("TestAgent", agent, 
                triggers: new[] { "help", "support" },
                ownedVariables: new[] { "customer_name" });

            // Assert
            Assert.True(teamChat.AvailableAgents.ContainsKey("TestAgent"));
            Assert.Equal("TestAgent", teamChat.AvailableAgents["TestAgent"].Name);
            Assert.Equal(2, teamChat.AvailableAgents["TestAgent"].Triggers.Length);
            Assert.Equal(1, teamChat.AvailableAgents["TestAgent"].OwnedVariables.Length);
        }

        [Fact]
        public void TeamChat_WithAgent_AdvancedConfiguration_ConfiguresAllProperties()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();
            var agent = CreateMockAgent("AdvancedAgent");

            // Act
            teamChat.WithAgent("AdvancedAgent", agent, configure =>
            {
                configure.Triggers = new[] { "technical", "bug", "error" };
                configure.OwnedVariables = new[] { "resolution_plan" };
                configure.Specializations = new[] { "database issues", "performance optimization" };
                configure.Priority = 8;
                configure.Description = "Especialista em problemas técnicos";
                configure.IsActive = true;
            });

            // Assert
            var configuredAgent = teamChat.AvailableAgents["AdvancedAgent"];
            Assert.Equal(3, configuredAgent.Triggers.Length);
            Assert.Equal(2, configuredAgent.Specializations.Length);
            Assert.Equal(8, configuredAgent.Priority);
            Assert.True(configuredAgent.IsActive);
        }

        #endregion

        #region Testes de Seleção de Agentes

        [Fact]
        public async Task TeamChat_ProcessMessage_SingleAgent_SelectsOnlyAgent()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();
            var agent = CreateMockAgent("OnlyAgent");
            teamChat.WithAgent("OnlyAgent", agent);

            // Act
            var response = await teamChat.ProcessMessageAsync("Hello, I need help");

            // Assert
            Assert.Contains("Response from OnlyAgent", response);
            Assert.Equal("OnlyAgent", teamChat.CurrentAgentName);
        }

        [Fact]
        public async Task TeamChat_ProcessMessage_TriggerMatch_SelectsCorrectAgent()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();
            
            teamChat.WithAgent("ReceptionAgent", CreateMockAgent("Reception"), 
                triggers: new[] { "registration", "customer info", "contact" });
                
            teamChat.WithAgent("SupportAgent", CreateMockAgent("Support"), 
                triggers: new[] { "issue", "problem", "bug", "error" });

            // Act
            var response = await teamChat.ProcessMessageAsync("I have a bug in the system");

            // Assert
            Assert.Equal("SupportAgent", teamChat.CurrentAgentName);
            Assert.Contains("Response from Support", response);
        }

        [Fact]
        public async Task TeamChat_ProcessMessage_VariableNeed_PrioritizesAgentWithMissingVariables()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();
            
            teamChat.WithAgent("ReceptionAgent", CreateMockAgent("Reception"), 
                ownedVariables: new[] { "customer_name", "customer_email" });
                
            teamChat.WithAgent("SupportAgent", CreateMockAgent("Support"), 
                ownedVariables: new[] { "issue_description", "priority_level" });

            // Simular que variáveis de reception já foram coletadas
            teamChat.SetVariable("customer_name", "João Silva", "ReceptionAgent");
            teamChat.SetVariable("customer_email", "joao@email.com", "ReceptionAgent");

            // Act - mensagem que não tem trigger específico
            var response = await teamChat.ProcessMessageAsync("I need some assistance");

            // Assert
            // SupportAgent deve ser selecionado por ter mais variáveis obrigatórias pendentes
            Assert.Equal("SupportAgent", teamChat.CurrentAgentName);
        }

        [Fact]
        public async Task TeamChat_ProcessMessage_Specialization_SelectsSpecializedAgent()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();
            
            teamChat.WithAgent("GeneralAgent", CreateMockAgent("General"), configure =>
            {
                configure.Specializations = new[] { "general support" };
                configure.Priority = 5;
            });
                
            teamChat.WithAgent("DatabaseExpert", CreateMockAgent("DBExpert"), configure =>
            {
                configure.Specializations = new[] { "database issues", "SQL problems" };
                configure.Priority = 7;
            });

            // Act
            var response = await teamChat.ProcessMessageAsync("I'm having database connection issues");

            // Assert
            Assert.Equal("DatabaseExpert", teamChat.CurrentAgentName);
            Assert.Contains("Response from DBExpert", response);
        }

        [Fact]
        public async Task TeamChat_ProcessMessage_Continuity_KeepsCurrentAgent()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();
            
            teamChat.WithAgent("Agent1", CreateMockAgent("Agent1"), 
                triggers: new[] { "help" },
                ownedVariables: new[] { "customer_name", "customer_email" });
                
            teamChat.WithAgent("Agent2", CreateMockAgent("Agent2"), 
                triggers: new[] { "support" });

            // Act - primeira mensagem
            await teamChat.ProcessMessageAsync("I need help with registration");
            Assert.Equal("Agent1", teamChat.CurrentAgentName);

            // Act - segunda mensagem sem trigger específico
            var response = await teamChat.ProcessMessageAsync("Can you help me more?");

            // Assert - deve manter Agent1 por continuidade
            Assert.Equal("Agent1", teamChat.CurrentAgentName);
        }

        #endregion

        #region Testes de Configuração de Pesos

        [Fact]
        public void TeamChat_WithSelectionWeights_ConfiguresCustomWeights()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();

            // Act
            teamChat.WithSelectionWeights(weights =>
            {
                weights.TriggerWeight = 0.4;
                weights.VariableWeight = 0.3;
                weights.ContinuityWeight = 0.2;
                weights.ContextWeight = 0.1;
                weights.SemanticWeight = 0.0;
                weights.AvailabilityWeight = 0.0;
            });

            // Assert - não há forma direta de testar os pesos internos
            // mas o teste verifica que a configuração não lança exceção
            Assert.NotNull(teamChat);
        }

        [Fact]
        public void AgentSelectionWeights_IsValid_ReturnsTrueForValidWeights()
        {
            // Arrange
            var weights = new TeamChat<string>.AgentSelectionWeights
            {
                TriggerWeight = 0.3,
                VariableWeight = 0.3,
                ContextWeight = 0.2,
                SemanticWeight = 0.1,
                ContinuityWeight = 0.1,
                AvailabilityWeight = 0.0
            };

            // Act & Assert
            Assert.True(weights.IsValid());
        }

        [Fact]
        public void AgentSelectionWeights_Normalize_AdjustsWeightsToSumOne()
        {
            // Arrange
            var weights = new TeamChat<string>.AgentSelectionWeights
            {
                TriggerWeight = 2.0,
                VariableWeight = 3.0,
                ContextWeight = 1.0,
                SemanticWeight = 1.0,
                ContinuityWeight = 2.0,
                AvailabilityWeight = 1.0
            };

            // Act
            weights.Normalize();

            // Assert
            Assert.True(weights.IsValid());
            Assert.Equal(0.2, weights.TriggerWeight, 2);
            Assert.Equal(0.3, weights.VariableWeight, 2);
        }

        #endregion

        #region Testes de Casos Extremos

        [Fact]
        public async Task TeamChat_ProcessMessage_NoAgents_ReturnsErrorMessage()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();
            // Não adicionar nenhum agente

            // Act
            var response = await teamChat.ProcessMessageAsync("Hello");

            // Assert
            Assert.Contains("Nenhum agente disponível", response);
        }

        [Fact]
        public async Task TeamChat_ProcessMessage_InactiveAgent_IsNotSelected()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();
            
            teamChat.WithAgent("ActiveAgent", CreateMockAgent("Active"), configure =>
            {
                configure.IsActive = true;
                configure.Priority = 5;
            });
                
            teamChat.WithAgent("InactiveAgent", CreateMockAgent("Inactive"), configure =>
            {
                configure.IsActive = false;
                configure.Priority = 10; // Prioridade alta mas inativo
                configure.Triggers = new[] { "help" };
            });

            // Act
            var response = await teamChat.ProcessMessageAsync("I need help");

            // Assert
            Assert.Equal("ActiveAgent", teamChat.CurrentAgentName);
        }

        [Fact]
        public async Task TeamChat_ProcessMessage_EmptyMessage_ThrowsException()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();
            teamChat.WithAgent("TestAgent", CreateMockAgent("Test"));

            // Act & Assert
            await Assert.ThrowsAsync<ArgumentException>(() => 
                teamChat.ProcessMessageAsync(""));
        }

        #endregion

        #region Testes de Performance

        [Fact]
        public async Task TeamChat_ProcessMessage_ManyAgents_SelectsOptimalAgent()
        {
            // Arrange
            var teamChat = CreateTeamChatWithAgents();
            
            // Adicionar muitos agentes
            for (int i = 1; i <= 10; i++)
            {
                teamChat.WithAgent($"Agent{i}", CreateMockAgent($"Agent{i}"), configure =>
                {
                    configure.Triggers = new[] { $"trigger{i}" };
                    configure.Priority = i;
                });
            }
            
            // Adicionar agente específico com trigger que será usado
            teamChat.WithAgent("SpecificAgent", CreateMockAgent("Specific"), configure =>
            {
                configure.Triggers = new[] { "specific", "targeted" };
                configure.Priority = 8;
            });

            // Act
            var startTime = DateTime.UtcNow;
            var response = await teamChat.ProcessMessageAsync("I need specific help");
            var duration = DateTime.UtcNow - startTime;

            // Assert
            Assert.Equal("SpecificAgent", teamChat.CurrentAgentName);
            Assert.True(duration.TotalMilliseconds < 500, "Agent selection should be fast even with many agents");
        }

        #endregion
    }
}